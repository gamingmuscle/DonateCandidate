{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n\nconst useForm = (initFieldValues, props, addToast) => {\n  _s();\n\n  let validationPatterns = {}; //{key:{required:boolean,pattern: regex string}}\n\n  const setValidationPatterns = p => {\n    //setter function\n    validationPatterns = { ...p\n    };\n  };\n\n  const [values, setValues] = useState(initFieldValues);\n  const inputLabel = /*#__PURE__*/React.createRef(); //reference for the Select object Label\n\n  const [labelWidth, setLabelWidth] = React.useState(0); //Label with and setter\n\n  React.useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n  }); //init label width\n  //  Handles changes to for input, updates values and calls the validation function on that field\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    if (validationPatterns[name]) validateForm({ ...{\n        [name]: validationPatterns[name]\n      }\n    });\n  }; //  handle form submission\n\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    if (validateForm()) //validate form\n      {\n        //  Success function\n        //  Helper function to resets form and creates a toast message\n        //  params[in] msg string message for the Toast\n        const onSuccess = msg => {\n          resetForm(); //reset form to default values\n\n          addToast(msg, {\n            apperance: 'success'\n          }); // create a toast message\n        };\n\n        if (props.currentId == 0 || props.currentId == null) // new record\n          props.createDCandidate(values, () => {\n            onSuccess(\"Record Inserted!\");\n          });else //update existing\n          props.updateDCandidate(props.currentId, values, () => {\n            onSuccess(\"Record Updated!\");\n          });\n      }\n  }; //error object and setter\n\n\n  const [errors, setErrors] = useState({}); //  resetForm function\n  //  resets all fields in the form to initial values.  Resets error object to an empty object\n\n  const resetForm = () => {\n    console.log(\"Reseting Form\");\n    setValues({ ...initFieldValues\n    });\n    setErrors({});\n    props.setCurrentId(0);\n  };\n\n  const validateForm = function () {\n    let fieldValidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : validationPatterns;\n    //{key:{required: boolean,pattern:...},...}\n    let temp = {};\n    Object.keys(fieldValidation).map((key, i) => {\n      //just check for a value\n      if (fieldValidation[key].required && !values[key]) // validate field is required and not empty\n        {\n          temp[key] = values[key] ? \"\" : \"This field is required.\";\n        }\n\n      if (values[key] && fieldValidation[key].pattern) // validadate field value passes the regex pattern check\n        {\n          const regEx = RegExp(fieldValidation[key].pattern, \"g\");\n          temp[key] = regEx.test(values[key]) ? \"\" : \"Invalid value\";\n        }\n    }); //set any errors to the errors object\n\n    setErrors({ ...temp\n    });\n    if (fieldValidation == validationPatterns) return Object.values(temp).every(x => x == \"\");\n  };\n\n  return {\n    values,\n    setValues,\n    handleInputChange,\n    inputLabel,\n    labelWidth,\n    setLabelWidth,\n    handleFormSubmit,\n    validateForm,\n    validationPatterns,\n    setValidationPatterns,\n    errors,\n    setErrors,\n    resetForm\n  };\n};\n\n_s(useForm, \"3FwiCu3MBiMHxTd3n7hpta88VNk=\");\n\nexport default useForm;","map":{"version":3,"names":["React","useState","useEffect","useForm","initFieldValues","props","addToast","validationPatterns","setValidationPatterns","p","values","setValues","inputLabel","createRef","labelWidth","setLabelWidth","current","offsetWidth","handleInputChange","e","name","value","target","validateForm","handleFormSubmit","preventDefault","onSuccess","msg","resetForm","apperance","currentId","createDCandidate","updateDCandidate","errors","setErrors","console","log","setCurrentId","fieldValidation","temp","Object","keys","map","key","i","required","pattern","regEx","RegExp","test","every","x"],"sources":["C:/Users/Tom/source/repos/donate-candidate-app/src/components/useForm.js"],"sourcesContent":["import React,{useState,useEffect} from \"react\"\r\nconst useForm = (initFieldValues,props,addToast) => {\r\n    let validationPatterns={}//{key:{required:boolean,pattern: regex string}}\r\n    const setValidationPatterns= p=>{//setter function\r\n        validationPatterns={...p}\r\n    }\r\n    const [values,setValues]= useState(initFieldValues)\r\n    const inputLabel = React.createRef();//reference for the Select object Label\r\n    const [labelWidth,setLabelWidth]= React.useState(0);//Label with and setter\r\n    React.useEffect(()=>{setLabelWidth(inputLabel.current.offsetWidth)})//init label width\r\n    \r\n    //  Handles changes to for input, updates values and calls the validation function on that field\r\n    const handleInputChange = e =>{\r\n        const {name,value}= e.target\r\n        \r\n        setValues({\r\n            ...values,\r\n            [name]:value\r\n        })\r\n        if(validationPatterns[name])\r\n            validateForm({...{[name]:validationPatterns[name]}})\r\n    }\r\n\r\n    //  handle form submission\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault()\r\n        \r\n        if(validateForm())//validate form\r\n        {\r\n            //  Success function\r\n            //  Helper function to resets form and creates a toast message\r\n            //  params[in] msg string message for the Toast\r\n            const onSuccess = (msg) => {\r\n                resetForm()  //reset form to default values\r\n                addToast(msg,{apperance:'success'}) // create a toast message\r\n            }\r\n            \r\n            if(props.currentId == 0 || props.currentId == null) // new record\r\n                props.createDCandidate(values,()=>{onSuccess(\"Record Inserted!\")})\r\n            else //update existing\r\n                props.updateDCandidate(props.currentId,values,()=>{onSuccess(\"Record Updated!\")})\r\n        }\r\n    }\r\n    //error object and setter\r\n    const [errors,setErrors] = useState({})\r\n\r\n    //  resetForm function\r\n    //  resets all fields in the form to initial values.  Resets error object to an empty object\r\n    const resetForm = () =>{\r\n        console.log(\"Reseting Form\")\r\n        setValues({...initFieldValues});\r\n        setErrors({})\r\n        props.setCurrentId(0)\r\n    }\r\n    const validateForm = (fieldValidation=validationPatterns) =>{//{key:{required: boolean,pattern:...},...}\r\n        let temp={}\r\n        \r\n        Object.keys(fieldValidation).map((key,i)=>{//just check for a value\r\n            if(fieldValidation[key].required && !values[key]) // validate field is required and not empty\r\n            {\r\n                temp[key]=values[key]?\"\":\"This field is required.\"\r\n            }\r\n            if(values[key] && fieldValidation[key].pattern) // validadate field value passes the regex pattern check\r\n            {\r\n                const regEx=RegExp(fieldValidation[key].pattern,\"g\")\r\n                temp[key] = regEx.test(values[key])?\"\":\"Invalid value\"\r\n            }\r\n            \r\n        })\r\n        //set any errors to the errors object\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if(fieldValidation==validationPatterns)\r\n            return Object.values(temp).every(x=> x == \"\")\r\n    }\r\n    return {\r\n        values,\r\n        setValues,\r\n        handleInputChange,\r\n        inputLabel,\r\n        labelWidth,\r\n        setLabelWidth,\r\n        handleFormSubmit, \r\n        validateForm,\r\n        validationPatterns,\r\n        setValidationPatterns,\r\n        errors,\r\n        setErrors,\r\n        resetForm    \r\n    };\r\n}\r\n\r\nexport default useForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}